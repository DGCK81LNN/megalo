{
  "version": 3,
  "sources": ["node_modules/audiobuffer-to-wav/index.js", "modules.js"],
  "sourcesContent": ["module.exports = audioBufferToWav\nfunction audioBufferToWav (buffer, opt) {\n  opt = opt || {}\n\n  var numChannels = buffer.numberOfChannels\n  var sampleRate = buffer.sampleRate\n  var format = opt.float32 ? 3 : 1\n  var bitDepth = format === 3 ? 32 : 16\n\n  var result\n  if (numChannels === 2) {\n    result = interleave(buffer.getChannelData(0), buffer.getChannelData(1))\n  } else {\n    result = buffer.getChannelData(0)\n  }\n\n  return encodeWAV(result, format, sampleRate, numChannels, bitDepth)\n}\n\nfunction encodeWAV (samples, format, sampleRate, numChannels, bitDepth) {\n  var bytesPerSample = bitDepth / 8\n  var blockAlign = numChannels * bytesPerSample\n\n  var buffer = new ArrayBuffer(44 + samples.length * bytesPerSample)\n  var view = new DataView(buffer)\n\n  /* RIFF identifier */\n  writeString(view, 0, 'RIFF')\n  /* RIFF chunk length */\n  view.setUint32(4, 36 + samples.length * bytesPerSample, true)\n  /* RIFF type */\n  writeString(view, 8, 'WAVE')\n  /* format chunk identifier */\n  writeString(view, 12, 'fmt ')\n  /* format chunk length */\n  view.setUint32(16, 16, true)\n  /* sample format (raw) */\n  view.setUint16(20, format, true)\n  /* channel count */\n  view.setUint16(22, numChannels, true)\n  /* sample rate */\n  view.setUint32(24, sampleRate, true)\n  /* byte rate (sample rate * block align) */\n  view.setUint32(28, sampleRate * blockAlign, true)\n  /* block align (channel count * bytes per sample) */\n  view.setUint16(32, blockAlign, true)\n  /* bits per sample */\n  view.setUint16(34, bitDepth, true)\n  /* data chunk identifier */\n  writeString(view, 36, 'data')\n  /* data chunk length */\n  view.setUint32(40, samples.length * bytesPerSample, true)\n  if (format === 1) { // Raw PCM\n    floatTo16BitPCM(view, 44, samples)\n  } else {\n    writeFloat32(view, 44, samples)\n  }\n\n  return buffer\n}\n\nfunction interleave (inputL, inputR) {\n  var length = inputL.length + inputR.length\n  var result = new Float32Array(length)\n\n  var index = 0\n  var inputIndex = 0\n\n  while (index < length) {\n    result[index++] = inputL[inputIndex]\n    result[index++] = inputR[inputIndex]\n    inputIndex++\n  }\n  return result\n}\n\nfunction writeFloat32 (output, offset, input) {\n  for (var i = 0; i < input.length; i++, offset += 4) {\n    output.setFloat32(offset, input[i], true)\n  }\n}\n\nfunction floatTo16BitPCM (output, offset, input) {\n  for (var i = 0; i < input.length; i++, offset += 2) {\n    var s = Math.max(-1, Math.min(1, input[i]))\n    output.setInt16(offset, s < 0 ? s * 0x8000 : s * 0x7FFF, true)\n  }\n}\n\nfunction writeString (view, offset, string) {\n  for (var i = 0; i < string.length; i++) {\n    view.setUint8(offset + i, string.charCodeAt(i))\n  }\n}\n", "window.audioBufferToWav = require('audiobuffer-to-wav')\n"],
  "mappings": "oEAAA,kBAAO,QAAU,EACjB,WAA2B,EAAQ,EAAK,CACtC,EAAM,GAAO,GAEb,GAAI,GAAc,EAAO,iBACrB,EAAa,EAAO,WACpB,EAAS,EAAI,QAAU,EAAI,EAC3B,EAAW,IAAW,EAAI,GAAK,GAE/B,EACJ,MAAI,KAAgB,EAClB,EAAS,EAAW,EAAO,eAAe,GAAI,EAAO,eAAe,IAEpE,EAAS,EAAO,eAAe,GAG1B,EAAU,EAAQ,EAAQ,EAAY,EAAa,GAG5D,WAAoB,EAAS,EAAQ,EAAY,EAAa,EAAU,CACtE,GAAI,GAAiB,EAAW,EAC5B,EAAa,EAAc,EAE3B,EAAS,GAAI,aAAY,GAAK,EAAQ,OAAS,GAC/C,EAAO,GAAI,UAAS,GAGxB,SAAY,EAAM,EAAG,QAErB,EAAK,UAAU,EAAG,GAAK,EAAQ,OAAS,EAAgB,IAExD,EAAY,EAAM,EAAG,QAErB,EAAY,EAAM,GAAI,QAEtB,EAAK,UAAU,GAAI,GAAI,IAEvB,EAAK,UAAU,GAAI,EAAQ,IAE3B,EAAK,UAAU,GAAI,EAAa,IAEhC,EAAK,UAAU,GAAI,EAAY,IAE/B,EAAK,UAAU,GAAI,EAAa,EAAY,IAE5C,EAAK,UAAU,GAAI,EAAY,IAE/B,EAAK,UAAU,GAAI,EAAU,IAE7B,EAAY,EAAM,GAAI,QAEtB,EAAK,UAAU,GAAI,EAAQ,OAAS,EAAgB,IACpD,AAAI,IAAW,EACb,EAAgB,EAAM,GAAI,GAE1B,EAAa,EAAM,GAAI,GAGlB,EAGT,WAAqB,EAAQ,EAAQ,CAOnC,OANI,GAAS,EAAO,OAAS,EAAO,OAChC,EAAS,GAAI,cAAa,GAE1B,EAAQ,EACR,EAAa,EAEV,EAAQ,GACb,EAAO,KAAW,EAAO,GACzB,EAAO,KAAW,EAAO,GACzB,IAEF,MAAO,GAGT,WAAuB,EAAQ,EAAQ,EAAO,CAC5C,OAAS,GAAI,EAAG,EAAI,EAAM,OAAQ,IAAK,GAAU,EAC/C,EAAO,WAAW,EAAQ,EAAM,GAAI,IAIxC,WAA0B,EAAQ,EAAQ,EAAO,CAC/C,OAAS,GAAI,EAAG,EAAI,EAAM,OAAQ,IAAK,GAAU,EAAG,CAClD,GAAI,GAAI,KAAK,IAAI,GAAI,KAAK,IAAI,EAAG,EAAM,KACvC,EAAO,SAAS,EAAQ,EAAI,EAAI,EAAI,MAAS,EAAI,MAAQ,KAI7D,WAAsB,EAAM,EAAQ,EAAQ,CAC1C,OAAS,GAAI,EAAG,EAAI,EAAO,OAAQ,IACjC,EAAK,SAAS,EAAS,EAAG,EAAO,WAAW,OC3FhD,OAAO,iBAAmB",
  "names": []
}
